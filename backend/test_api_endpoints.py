#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import requests
import json
import time
import sys

BASE_URL = "http://localhost:8000"

def test_health():
    """–¢–µ—Å—Ç health check"""
    print("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Health check: OK")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_academic_search():
    """–¢–µ—Å—Ç –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    
    test_email = "test.professor@university.edu"
    
    payload = {
        "email": test_email,
        "force_refresh": True
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/academic-search",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {data.get('source', 'unknown')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if 'data' in data:
                academic_data = data['data']
                print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
                if 'academic_profile' in academic_data:
                    profile = academic_data['academic_profile']
                    print(f"  - Email: {profile.get('email', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
                    print(f"  - –°—Ç–µ–ø–µ–Ω–∏: {len(profile.get('degrees', []))}")
                    print(f"  - –î–æ–ª–∂–Ω–æ—Å—Ç–∏: {len(profile.get('positions', []))}")
                    print(f"  - –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏: {len(profile.get('institutions', []))}")
                    print(f"  - –û–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {len(profile.get('research_areas', []))}")
                    print(f"  - –ü—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(profile.get('publications', []))}")
                
                if 'search_results' in academic_data:
                    print(f"  - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {len(academic_data['search_results'])}")
                
                if 'confidence_scores' in academic_data:
                    confidence = academic_data['confidence_scores']
                    print(f"  - –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence.get('overall', 0):.2f}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_digital_twin_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞...")
    
    test_email = "test.professor@university.edu"
    
    payload = {
        "email": test_email,
        "force_refresh": True
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/digital-twin",
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω")
            print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {data.get('source', 'unknown')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if 'data' in data:
                twin_data = data['data']
                print(f"üé≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–∏—Ñ—Ä–æ–≤–æ–º –¥–≤–æ–π–Ω–∏–∫–µ:")
                print(f"  - Email: {twin_data.get('email', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
                print(f"  - –ò–º—è: {twin_data.get('name', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}")
                print(f"  - –û—Å–Ω–æ–≤–Ω–∞—è –∞—Ñ—Ñ–∏–ª–∏–∞—Ü–∏—è: {twin_data.get('primary_affiliation', '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')}")
                
                if 'personality_profile' in twin_data:
                    personality = twin_data['personality_profile']
                    print(f"  - –°—Ç–∞–¥–∏—è –∫–∞—Ä—å–µ—Ä—ã: {personality.get('career_stage', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
                    print(f"  - –£—Ä–æ–≤–µ–Ω—å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã: {personality.get('expertise_level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                    print(f"  - –°—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {personality.get('communication_style', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                
                if 'impact_metrics' in twin_data:
                    impact = twin_data['impact_metrics']
                    print(f"  - –û–±—â–∏–π –±–∞–ª–ª –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è: {impact.get('overall_impact_score', 0):.2f}")
                
                print(f"  - –ë–∞–ª–ª —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {twin_data.get('confidence_score', 0):.2f}")
                print(f"  - –ë–∞–ª–ª –ø–æ–ª–Ω–æ—Ç—ã: {twin_data.get('completeness_score', 0):.2f}")
            
            if 'summary' in data:
                summary = data['summary']
                print(f"üìã –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:")
                print(f"  - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {summary.get('visualization_ready', False)}")
                if 'quality_metrics' in summary:
                    quality = summary['quality_metrics']
                    print(f"  - –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {quality.get('data_sources_count', 0)}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_get_academic_profile():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    print("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
    
    test_email = "test.professor@university.edu"
    
    try:
        response = requests.get(f"{BASE_URL}/api/academic-profile/{test_email}")
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω")
            
            if 'data' in data:
                profile_data = data['data']
                if 'academic_profile' in profile_data:
                    profile = profile_data['academic_profile']
                    print(f"üìä –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç:")
                    print(f"  - –°—Ç–µ–ø–µ–Ω–∏: {len(profile.get('degrees', []))}")
                    print(f"  - –î–æ–ª–∂–Ω–æ—Å—Ç–∏: {len(profile.get('positions', []))}")
                    print(f"  - –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏: {len(profile.get('institutions', []))}")
                    print(f"  - –û–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {len(profile.get('research_areas', []))}")
            
            return True
        elif response.status_code == 404:
            print("‚ö†Ô∏è –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_get_digital_twin():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞"""
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞...")
    
    test_email = "test.professor@university.edu"
    
    try:
        response = requests.get(f"{BASE_URL}/api/digital-twin/{test_email}")
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –ø–æ–ª—É—á–µ–Ω")
            
            if 'data' in data:
                twin_data = data['data']
                print(f"üé≠ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫:")
                print(f"  - Email: {twin_data.get('email', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
                print(f"  - –ò–º—è: {twin_data.get('name', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}")
                print(f"  - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {twin_data.get('creation_timestamp', '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')}")
            
            return True
        elif response.status_code == 404:
            print("‚ö†Ô∏è –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–≤–æ–π–Ω–∏–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_get_visualization():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    test_email = "test.professor@university.edu"
    
    try:
        response = requests.get(f"{BASE_URL}/api/visualization/{test_email}")
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã")
            
            if 'data' in data:
                viz_data = data['data']
                print(f"üìä –†–∞–∑–¥–µ–ª—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ({len(viz_data)}):")
                for section in viz_data.keys():
                    print(f"  - {section}")
            
            return True
        elif response.status_code == 404:
            print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ Email Intelligence Collector")
    print("=" * 70)
    
    tests = [
        ("Health Check", test_health),
        ("–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫", test_academic_search),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞", test_digital_twin_creation),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è", test_get_academic_profile),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞", test_get_digital_twin),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", test_get_visualization),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"üß™ {test_name}")
        print(f"{'='*50}")
        
        try:
            result = test_func()
            
            if result:
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
            
            results.append((test_name, result))
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            time.sleep(1)
            
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*70}")
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ API –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*70}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{test_name}: {status}")
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ API –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ API —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ email –∞–¥—Ä–µ—Å–æ–≤
Comprehensive Email Intelligence Analysis Demo Script
"""

import asyncio
import sys
import os
import json
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from backend.modules.automated_intelligence_system import AutomatedIntelligenceSystem, analyze_email_comprehensive

async def demo_comprehensive_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ email –∞–¥—Ä–µ—Å–∞"""
    
    print("=" * 80)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–ó–ê EMAIL –ê–î–†–ï–°–û–í")
    print("=" * 80)
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π email –∞–¥—Ä–µ—Å
    test_email = "buch1202@mail.ru"
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π email –∞–¥—Ä–µ—Å: {test_email}")
    print()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    config = {
        'max_processing_time': 180,  # 3 –º–∏–Ω—É—Ç—ã
        'enable_deep_search': True,
        'enable_academic_analysis': True,
        'enable_social_analysis': True,
        'enable_digital_twin': True,
        'request_delay': 1.0,
        'max_concurrent_requests': 3
    }
    
    print("‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:")
    for key, value in config.items():
        print(f"   ‚Ä¢ {key}: {value}")
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞...")
    system = AutomatedIntelligenceSystem(config)
    
    try:
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        print("üìä –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        print()
        
        start_time = datetime.now()
        results = await system.analyze_email(test_email)
        end_time = datetime.now()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print("=" * 80)
        print()
        
        print("üìà –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print(f"   ‚Ä¢ Email –∞–¥—Ä–µ—Å: {results.email}")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results.processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   ‚Ä¢ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è: {results.overall_confidence_score:.2f}/1.0")
        print(f"   ‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {results.data_completeness_score:.2f}/1.0")
        print(f"   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {len(results.verification_sources)}")
        print()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        print("üìß –í–ê–õ–ò–î–ê–¶–ò–Ø EMAIL:")
        email_valid = results.email_validation.get('is_valid', False)
        print(f"   ‚Ä¢ –í–∞–ª–∏–¥–Ω—ã–π: {'‚úÖ –î–∞' if email_valid else '‚ùå –ù–µ—Ç'}")
        print(f"   ‚Ä¢ –î–æ–º–µ–Ω: {results.email_validation.get('domain', 'N/A')}")
        print(f"   ‚Ä¢ –¢–∏–ø –¥–æ–º–µ–Ω–∞: {_get_domain_type(results.email_validation)}")
        print()
        
        # –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
        print("üîç –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:")
        if results.key_findings:
            for finding in results.key_findings:
                print(f"   ‚Ä¢ {finding}")
        else:
            print("   ‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        print()
        
        # –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        print("üéì –ê–ö–ê–î–ï–ú–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
        if results.academic_profile:
            institution = results.academic_profile.get('institution', 'N/A')
            orcid = results.academic_profile.get('orcid_id', 'N/A')
            print(f"   ‚Ä¢ –£—á—Ä–µ–∂–¥–µ–Ω–∏–µ: {institution}")
            print(f"   ‚Ä¢ ORCID ID: {orcid}")
            print(f"   ‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(results.academic_publications)}")
        else:
            print("   ‚Ä¢ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print()
        
        # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
        print("üåê –°–û–¶–ò–ê–õ–¨–ù–´–ï –°–ï–¢–ò:")
        if results.social_profiles:
            print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(results.social_profiles)}")
            for profile in results.social_profiles[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                platform = profile.get('platform', 'Unknown')
                url = profile.get('url', 'N/A')
                print(f"   ‚Ä¢ {platform}: {url}")
        else:
            print("   ‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print()
        
        # –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫
        print("ü§ñ –¶–ò–§–†–û–í–û–ô –î–í–û–ô–ù–ò–ö:")
        if results.digital_twin:
            personality = results.personality_analysis.get('communication_style', 'N/A')
            network_size = results.network_analysis.get('network_size', 0)
            print(f"   ‚Ä¢ –°—Ç–∏–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {personality}")
            print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä —Å–µ—Ç–∏: {network_size}")
            print(f"   ‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω: ‚úÖ")
        else:
            print("   ‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω")
        print()
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("‚úÖ –ò–°–¢–û–ß–ù–ò–ö–ò –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò:")
        if results.verification_sources:
            for source in results.verification_sources:
                print(f"   ‚Ä¢ {source}")
        else:
            print("   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if results.recommendations:
            for recommendation in results.recommendations:
                print(f"   ‚Ä¢ {recommendation}")
        else:
            print("   ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
        print("‚ö†Ô∏è  –ò–ù–î–ò–ö–ê–¢–û–†–´ –†–ò–°–ö–ê:")
        if results.risk_indicators:
            for risk in results.risk_indicators:
                print(f"   ‚Ä¢ {risk}")
        else:
            print("   ‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        print()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
        json_path = f"comprehensive_analysis_{test_email.replace('@', '_at_')}_{timestamp}.json"
        system.save_results(json_path)
        print(f"   ‚Ä¢ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json_path}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = system.generate_report()
        report_path = f"comprehensive_report_{test_email.replace('@', '_at_')}_{timestamp}.md"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        print(f"   ‚Ä¢ –û—Ç—á–µ—Ç –≤ Markdown: {report_path}")
        print()
        
        print("=" * 80)
        print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 80)
        
        return results
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê: {str(e)}")
        print("=" * 80)
        return None

def _get_domain_type(validation_data):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–º–µ–Ω–∞"""
    if validation_data.get('is_academic_domain'):
        return "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π"
    elif validation_data.get('is_corporate_domain'):
        return "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π"
    elif validation_data.get('is_public_domain'):
        return "–ü—É–±–ª–∏—á–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

async def test_api_endpoint():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint"""
    import aiohttp
    
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINT")
    print("=" * 80)
    
    api_url = "http://localhost:8000/api/comprehensive-analysis"
    test_email = "buch1202@mail.ru"
    
    payload = {
        "email": test_email,
        "force_refresh": True
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {api_url}")
            print(f"üìß Email –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {test_email}")
            
            async with session.post(api_url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    print("‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!")
                    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {data.get('status')}")
                    print(f"   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source')}")
                    print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {data.get('processing_time', 'N/A')} —Å–µ–∫")
                    print(f"   ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è: {data.get('confidence_score', 'N/A')}")
                else:
                    print(f"‚ùå API –æ—à–∏–±–∫–∞: {response.status}")
                    error_text = await response.text()
                    print(f"   –î–µ—Ç–∞–ª–∏: {error_text}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print("üéØ –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:")
    print("1. –ü—Ä—è–º–æ–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å")
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint")
    print("3. –û–±–∞ —Ä–µ–∂–∏–º–∞")
    print()
    
    try:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        print()
        
        if choice == "1" or choice == "3":
            await demo_comprehensive_analysis()
            
        if choice == "2" or choice == "3":
            await test_api_endpoint()
            
        if choice not in ["1", "2", "3"]:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            await demo_comprehensive_analysis()
            
    except KeyboardInterrupt:
        print("\n\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    print()
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ email –∞–¥—Ä–µ—Å–æ–≤...")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
    try:
        import aiohttp
        print("‚úÖ aiohttp –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ö†Ô∏è  aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    asyncio.run(main())

#!/bin/bash

# Email Intelligence Collector - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
set -e

export PATH="/Applications/Docker.app/Contents/Resources/bin:$PATH"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

show_help() {
    echo "Email Intelligence Collector - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./manage.sh [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  build     - –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑"
    echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo "  health    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ API"
    echo "  stats     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API"
    echo "  shell     - –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  init-db   - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    echo "  clean     - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
    echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  ./manage.sh start"
    echo "  ./manage.sh logs"
    echo "  ./manage.sh health"
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker Desktop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω."
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        print_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop."
        exit 1
    fi
}

start_container() {
    print_info "–ó–∞–ø—É—Å–∫ Email Intelligence Collector..."
    
    if docker compose -f docker-compose.simple.yml ps | grep -q "Up"; then
        print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        return
    fi
    
    docker compose -f docker-compose.simple.yml up -d
    
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
    sleep 15
    
    if docker compose -f docker-compose.simple.yml ps | grep -q "Up"; then
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
        show_urls
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
        docker compose -f docker-compose.simple.yml logs --tail=10
    fi
}

stop_container() {
    print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker compose -f docker-compose.simple.yml down
    print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

restart_container() {
    print_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    stop_container
    start_container
}

build_image() {
    print_info "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞..."
    docker compose -f docker-compose.simple.yml build --no-cache
    print_success "–û–±—Ä–∞–∑ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω"
}

show_logs() {
    print_info "–õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
    docker compose -f docker-compose.simple.yml logs --tail=50 -f
}

show_status() {
    print_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
    docker compose -f docker-compose.simple.yml ps
}

check_health() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # Check API
    if curl -s -f http://localhost:8001/health > /dev/null; then
        print_success "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        curl -s http://localhost:8001/health | python3 -m json.tool 2>/dev/null || echo ""
    else
        print_error "‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    # Check Frontend
    if curl -s -f http://localhost:3000/ > /dev/null; then
        print_success "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    else
        print_error "‚ùå Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
}

show_stats() {
    print_info "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:"
    
    if curl -s -f http://localhost:8001/api/stats > /dev/null; then
        curl -s http://localhost:8001/api/stats | python3 -m json.tool 2>/dev/null || echo "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        return 1
    fi
}

enter_shell() {
    print_info "–í—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
    docker exec -it eic-app /bin/bash
}

init_database() {
    print_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    docker exec eic-app python -c "
import sys
sys.path.append('/app/backend')
from database.connection import engine
from database.models import Base
Base.metadata.create_all(bind=engine)
print('Database tables created successfully!')
" && print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞" || print_error "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
}

clean_all() {
    print_warning "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)"
    read -r response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
        print_info "–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö..."
        docker compose -f docker-compose.simple.yml down -v
        docker system prune -f
        print_success "–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
    else
        print_info "–û—Ç–º–µ–Ω–µ–Ω–æ"
    fi
}

show_urls() {
    echo ""
    echo "üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "   üåê Frontend: http://localhost:3000"
    echo "   üöÄ API: http://localhost:8001"
    echo "   üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8001/docs"
    echo "   ‚ù§Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:8001/health"
    echo "   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:8001/api/stats"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    start)
        check_docker
        start_container
        ;;
    stop)
        check_docker
        stop_container
        ;;
    restart)
        check_docker
        restart_container
        ;;
    build)
        check_docker
        build_image
        ;;
    logs)
        check_docker
        show_logs
        ;;
    status)
        check_docker
        show_status
        ;;
    health)
        check_health
        ;;
    stats)
        show_stats
        ;;
    shell)
        check_docker
        enter_shell
        ;;
    init-db)
        check_docker
        init_database
        ;;
    clean)
        check_docker
        clean_all
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo ""
        show_help
        exit 1
        ;;
esac

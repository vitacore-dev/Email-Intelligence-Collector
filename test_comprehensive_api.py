#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ email –∞–¥—Ä–µ—Å–æ–≤
Test script for comprehensive email analysis API endpoint
"""

import requests
import json
import time
from datetime import datetime

def test_comprehensive_analysis_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("=" * 70)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê EMAIL –ê–î–†–ï–°–û–í")
    print("=" * 70)
    print()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    api_base = "http://localhost:8001"
    test_email = "buch1202@mail.ru"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
    print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API...")
    try:
        response = requests.get(f"{api_base}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            health_data = response.json()
            print(f"   –°—Ç–∞—Ç—É—Å: {health_data.get('status')}")
        else:
            print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π: ./start_backend.sh")
        return
    
    print()
    
    # –¢–µ—Å—Ç 1: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("üîç –¢–µ—Å—Ç 1: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ email –∞–¥—Ä–µ—Å–∞")
    print(f"   Email: {test_email}")
    
    payload = {
        "email": test_email,
        "force_refresh": True
    }
    
    try:
        print("   –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        start_time = time.time()
        
        response = requests.post(
            f"{api_base}/api/comprehensive-analysis",
            json=payload,
            timeout=300  # 5 –º–∏–Ω—É—Ç
        )
        
        end_time = time.time()
        request_time = end_time - start_time
        
        if response.status_code == 200:
            print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            data = response.json()
            
            print(f"   –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_time:.2f} —Å–µ–∫")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source')}")
            
            if 'processing_time' in data:
                print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {data['processing_time']:.2f} —Å–µ–∫")
            
            if 'confidence_score' in data:
                print(f"   –†–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è: {data['confidence_score']:.2f}")
                
            if 'completeness_score' in data:
                print(f"   –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {data['completeness_score']:.2f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"api_test_result_{timestamp}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.Timeout:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    print("üìÅ –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
    try:
        response = requests.get(f"{api_base}/api/profile/{test_email}", timeout=30)
        
        if response.status_code == 200:
            print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            data = response.json()
            profile_data = data.get('data', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if 'comprehensive_analysis' in profile_data:
                print("   ‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
                comp_data = profile_data['comprehensive_analysis']
                if 'overall_confidence_score' in comp_data:
                    print(f"   –†–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è: {comp_data['overall_confidence_score']:.2f}")
            else:
                print("   ‚ö†Ô∏è  –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    print("üìä –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    try:
        response = requests.get(f"{api_base}/api/stats", timeout=30)
        
        if response.status_code == 200:
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            data = response.json()
            
            print(f"   –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {data.get('total_profiles', 0)}")
            print(f"   –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {data.get('total_searches', 0)}")
            
            recent_searches = data.get('recent_searches', [])
            comprehensive_searches = [s for s in recent_searches if s.get('search_type') == 'comprehensive']
            print(f"   –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {len(comprehensive_searches)}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    print("üóÑÔ∏è  –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    payload_cached = {
        "email": test_email,
        "force_refresh": False  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
    }
    
    try:
        print("   –ó–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞...")
        start_time = time.time()
        
        response = requests.post(
            f"{api_base}/api/comprehensive-analysis",
            json=payload_cached,
            timeout=60
        )
        
        end_time = time.time()
        cached_request_time = end_time - start_time
        
        if response.status_code == 200:
            data = response.json()
            source = data.get('source', 'unknown')
            
            if source == 'cache':
                print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                print(f"   –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {cached_request_time:.2f} —Å–µ–∫ (–∫—ç—à)")
            else:
                print("‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω–µ –∏–∑ –∫—ç—à–∞")
                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞: {e}")
    
    print()
    print("=" * 70)
    print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 70)

def test_other_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö endpoint'–æ–≤"""
    
    print("\n" + "=" * 70)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–†–£–ì–ò–• API ENDPOINTS")
    print("=" * 70)
    
    api_base = "http://localhost:8001"
    test_email = "buch1202@mail.ru"
    
    endpoints = [
        ("GET", "/api/academic-profile/{email}", f"–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {test_email}"),
        ("GET", "/api/digital-twin/{email}", f"–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –¥–ª—è {test_email}"),
        ("GET", "/api/digital-twin-aggregate/{email}", f"–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –¥–ª—è {test_email}")
    ]
    
    for method, endpoint, description in endpoints:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {description}")
        
        url = f"{api_base}{endpoint.format(email=test_email)}"
        
        try:
            if method == "GET":
                response = requests.get(url, timeout=30)
            else:
                response = requests.post(url, timeout=30)
            
            if response.status_code == 200:
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                data = response.json()
                print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status', 'N/A')}")
            elif response.status_code == 404:
                print("   ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π)")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ email –∞–¥—Ä–µ—Å–æ–≤\n")
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_comprehensive_analysis_api()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_other_endpoints()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

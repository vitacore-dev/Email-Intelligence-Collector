services:
  # Backend API Service
  email-intelligence-collector:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eic-app
    ports:
      - "8001:8000"  # Используем 8001 чтобы не конфликтовать с существующим сервисом
    environment:
      - DEBUG=True
      - DATABASE_URL=sqlite:///./data/eic_db.sqlite
      - PORT=8000
      - HOST=0.0.0.0
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app/backend
      # API ключи (опционально)
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - TWITTER_API_KEY=${TWITTER_API_KEY:-}
      - LINKEDIN_API_KEY=${LINKEDIN_API_KEY:-}
      - GITHUB_API_KEY=${GITHUB_API_KEY:-}
      # Настройки сбора данных
      - MAX_CONCURRENT_REQUESTS=10
      - REQUEST_TIMEOUT=30
      - RETRY_ATTEMPTS=3
      - MAX_BULK_EMAILS=1000
      - RATE_LIMIT_PER_MINUTE=60
      - SECRET_KEY=docker-secret-key-change-in-production
    volumes:
      # Постоянное хранение данных
      - eic_data:/app/data
      - eic_logs:/app/backend/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - eic-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      target: production
      args:
        - REACT_APP_API_URL=http://localhost:8001
    container_name: eic-frontend
    ports:
      - "3000:80"
    depends_on:
      - email-intelligence-collector
    networks:
      - eic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  eic_data:
    driver: local
  eic_logs:
    driver: local

networks:
  eic-network:
    driver: bridge

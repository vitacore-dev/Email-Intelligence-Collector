#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import PyPDF2
import pdfplumber
import re
import sys
from pathlib import Path

def extract_text_pypdf2(pdf_path):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é PyPDF2"""
    text = ""
    try:
        with open(pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ PDF: {len(reader.pages)}")
            
            for i, page in enumerate(reader.pages):
                page_text = page.extract_text()
                text += f"\n=== –°–¢–†–ê–ù–ò–¶–ê {i+1} ===\n"
                text += page_text
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ PyPDF2: {e}")
    
    return text

def extract_text_pdfplumber(pdf_path):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é pdfplumber (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)"""
    text = ""
    try:
        with pdfplumber.open(pdf_path) as pdf:
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ PDF: {len(pdf.pages)}")
            
            for i, page in enumerate(pdf.pages):
                page_text = page.extract_text()
                if page_text:
                    text += f"\n=== –°–¢–†–ê–ù–ò–¶–ê {i+1} ===\n"
                    text += page_text
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ pdfplumber: {e}")
    
    return text

def find_email_context(text, target_email):
    """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ —Ü–µ–ª–µ–≤–æ–≥–æ email"""
    lines = text.split('\n')
    results = []
    
    for i, line in enumerate(lines):
        if target_email.lower() in line.lower():
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç: 3 —Å—Ç—Ä–æ–∫–∏ –¥–æ –∏ 3 —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ
            start = max(0, i-3)
            end = min(len(lines), i+4)
            
            context = {
                'line_number': i+1,
                'line': line,
                'context': lines[start:end],
                'context_range': f"—Å—Ç—Ä–æ–∫–∏ {start+1}-{end}"
            }
            results.append(context)
    
    return results

def extract_authors_and_contacts(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–∞—Ö –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö"""
    # –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–≤—Ç–æ—Ä–æ–≤
    author_patterns = [
        r'[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+',  # –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        r'[A-Z][a-z]+\s+[A-Z][a-z]+\s+[A-Z][a-z]+',  # –§–ò–û –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        r'[–ê-–Ø–Å]\.?\s*[–ê-–Ø–Å]\.?\s*[–ê-–Ø–Å][–∞-—è—ë]+',  # –ò–Ω–∏—Ü–∏–∞–ª—ã + —Ñ–∞–º–∏–ª–∏—è
    ]
    
    # –ü–æ–∏—Å–∫ email –∞–¥—Ä–µ—Å–æ–≤
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    
    # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    phone_patterns = [
        r'\+7\s*\(\d{3}\)\s*\d{3}-\d{2}-\d{2}',
        r'\+7\s*\d{3}\s*\d{3}\s*\d{2}\s*\d{2}',
        r'8\s*\(\d{3}\)\s*\d{3}-\d{2}-\d{2}',
    ]
    
    authors = []
    emails = []
    phones = []
    
    # –ü–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–æ–≤
    for pattern in author_patterns:
        matches = re.findall(pattern, text)
        authors.extend(matches)
    
    # –ü–æ–∏—Å–∫ email –∞–¥—Ä–µ—Å–æ–≤
    emails = re.findall(email_pattern, text)
    
    # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    for pattern in phone_patterns:
        matches = re.findall(pattern, text)
        phones.extend(matches)
    
    return {
        'authors': list(set(authors)),
        'emails': list(set(emails)),
        'phones': list(set(phones))
    }

def extract_affiliations(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ñ—Ñ–∏–ª–∏–∞—Ü–∏–∏ (—É—á—Ä–µ–∂–¥–µ–Ω–∏—è, –∞–¥—Ä–µ—Å–∞)"""
    # –ü–æ–∏—Å–∫ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π
    institution_patterns = [
        r'[–ê-–Ø–Å][–∞-—è—ë]*\s+[–∞-—è—ë]*\s*[–£—É]–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
        r'[–ê-–Ø–Å][–∞-—è—ë]*\s+[–∞-—è—ë]*\s*[–ò–∏]–Ω—Å—Ç–∏—Ç—É—Ç',
        r'[–ê-–Ø–Å][–∞-—è—ë]*\s+[–∞-—è—ë]*\s*[–¶—Ü]–µ–Ω—Ç—Ä',
        r'[–ê-–Ø–Å][–∞-—è—ë]*\s+[–∞-—è—ë]*\s*[–ö–∫]–ª–∏–Ω–∏–∫–∞',
        r'[–ê-–Ø–Å][–∞-—è—ë]*\s+[–∞-—è—ë]*\s*[–ê–∞]–∫–∞–¥–µ–º–∏[—è–∏]',
    ]
    
    # –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤
    address_patterns = [
        r'–≥\.\s*[–ê-–Ø–Å][–∞-—è—ë]+',
        r'[–ê-–Ø–Å][–∞-—è—ë]+,\s*\d+',
        r'—É–ª\.\s*[–ê-–Ø–Å][–∞-—è—ë\s]+,\s*\d+',
    ]
    
    institutions = []
    addresses = []
    
    for pattern in institution_patterns:
        matches = re.findall(pattern, text)
        institutions.extend(matches)
    
    for pattern in address_patterns:
        matches = re.findall(pattern, text)
        addresses.extend(matches)
    
    return {
        'institutions': list(set(institutions)),
        'addresses': list(set(addresses))
    }

def analyze_pdf(pdf_path, target_email):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ PDF"""
    print(f"–ê–Ω–∞–ª–∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞: {pdf_path}")
    print(f"–ü–æ–∏—Å–∫ email: {target_email}")
    print("=" * 60)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏
    print("1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é PyPDF2...")
    text_pypdf2 = extract_text_pypdf2(pdf_path)
    
    print("\n2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é pdfplumber...")
    text_pdfplumber = extract_text_pdfplumber(pdf_path)
    
    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    text = text_pdfplumber if len(text_pdfplumber) > len(text_pypdf2) else text_pypdf2
    
    print(f"\n–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(text)}")
    
    # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ email
    print(f"\n3. –ü–æ–∏—Å–∫ email '{target_email}'...")
    email_contexts = find_email_context(text, target_email)
    
    if email_contexts:
        print(f"‚úÖ Email –Ω–∞–π–¥–µ–Ω –≤ {len(email_contexts)} –º–µ—Å—Ç–∞—Ö!")
        for i, context in enumerate(email_contexts):
            print(f"\n--- –í—Ö–æ–∂–¥–µ–Ω–∏–µ {i+1} ---")
            print(f"–°—Ç—Ä–æ–∫–∞ {context['line_number']}: {context['line']}")
            print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç ({context['context_range']}):")
            for line in context['context']:
                print(f"  {line}")
    else:
        print("‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ")
    
    # –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä–æ–≤ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    print("\n4. –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä–æ–≤ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
    contacts = extract_authors_and_contacts(text)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–≤: {len(contacts['authors'])}")
    for author in contacts['authors'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
        print(f"  - {author}")
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ email –∞–¥—Ä–µ—Å–æ–≤: {len(contacts['emails'])}")
    for email in contacts['emails']:
        print(f"  - {email}")
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {len(contacts['phones'])}")
    for phone in contacts['phones']:
        print(f"  - {phone}")
    
    # –ê–Ω–∞–ª–∏–∑ –∞—Ñ—Ñ–∏–ª–∏–∞—Ü–∏–∏
    print("\n5. –ê–Ω–∞–ª–∏–∑ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –∞–¥—Ä–µ—Å–æ–≤...")
    affiliations = extract_affiliations(text)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π: {len(affiliations['institutions'])}")
    for inst in affiliations['institutions']:
        print(f"  - {inst}")
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {len(affiliations['addresses'])}")
    for addr in affiliations['addresses']:
        print(f"  - {addr}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    output_file = "/tmp/extracted_text.txt"
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(text)
    print(f"\nüìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
    
    return {
        'text': text,
        'email_contexts': email_contexts,
        'contacts': contacts,
        'affiliations': affiliations
    }

if __name__ == "__main__":
    pdf_path = "/tmp/found_pdf.pdf"
    target_email = "buch1202@mail.ru"
    
    if not Path(pdf_path).exists():
        print(f"‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        sys.exit(1)
    
    results = analyze_pdf(pdf_path, target_email)
